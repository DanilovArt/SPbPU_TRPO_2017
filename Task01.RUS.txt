Задание 1.
=========================================================================

Требуется создать простое stateless-приложение с REST-интерфейсом для валидации JSON файлов.
Вы вольны использовать любые Фреймворки и библиотеки, которые посчитаете полезными.

Функциональные требования (допускаются отступления в разумных рамках):
Исходный код проекта размещается в публичном git-репозитории (Github, Bitbucket)
Проект запускается в Docker прямо из репозитория, т.е. я как пользователь не должен ничего компилировать, я делаю только docker run с указанием URL репозитория проекта (Dockerfile должен быть в корне).
Запущенный в Docker сервис не хранит состояния, все ошибки и лог работы выводятся на stdout/stderr и доступны через docker log.
В качестве ОС для запуска сервиса в Docker используется Alpine Linux и OpenJDK.
После запуска, сервис ожидает подключений на 80-м порту. После получения файла, сервис выполняет его синхронную валидацию на соответствие JSON стандарту. В случае успеха, требуется вернуть этот-же JSON файл. В противном случае, сообщить об ошибке с указанием причины и места возникновения (используется код ответа 200!).
Краткая документация по проекту размещена в корне репозитория, файл README.md (документация, как и javadoc, должна быть на английском языке)
Никаких служебных файлов в репозитории нет (используйте .gitignore)

Не функциональные требования:
Строго следовать Java Convention при именовании классов, методов и формировании Java docs.
Вести разработку итеративно, т.е. делать комиты в git по мере реализации новой возможности.

Дополнительные пожелания:
Не использовать хардкод в переменных. Сделайте конфиг файл и читайте его при запуске.
Я вижу тут как минимум три класса:
- Класс для формирования уровня представления, он принимает запрос от пользователя и формирует ответ.
- Класс для чтения конфига на сервисном уровне (может быть еще класс для управления логированием).
- Класс для реализации бизнес-логики, той самой валидации JSONа.
Если будет время/желание/силы:
- Реализовать валидацию XML, YML, Java class file
- Обеспечить работу сервиса на порту 443 с валидным сертификатом от Let's Encrypt
- Реализовать многопоточную работу (выполнение запросов от множества клиентов в один момент времени), провести нагрузочное тестирование.
- Реализовать систему кэширования для уже валидированных файлов

Примеры:
Запуск контейнера с сервисом
docker build -t validation-service github.com/username/projectname && docker run -d --rm -p 80:80 validation-service

Отправка файла на валидацию
curl -s --data-binary @filename.json http://localhost

Пример ответа сервиса в случае ошибки

{
 "errorCode"  : 12345,
 "errorMessage" : ["verbose, plain language description of the problem with hints about how to fix it]",
 "errorPlace" : ["highlight the point where error has occurred"],
 "resource"   : ["filename"],
 "request-id" : ["the request id generated by the API for easier tracking of errors"],
}

Ожидаемое время работы над реализацией проекта -- 3 часа
