Задание 3.
=========================================================================

Требуется настроить Jenkins внутри докер контейнера и настроить его на работу с вашим тестовым репозиторием содержащим ДЗ из 1 задания. 
GitHub репозиторий должен быть связан через Webhooks с Jenkins для тестовой сборки проекта после каждого Push в ваш репо.

Порядок работы:
1. Дождаться появления issue на выполнение этой задачи в своём репозитории. После выполнения второго ДЗ.
2. Настроить Jenkins внутри докер контейнера (вариант с настройкой на удаленном сервере рассматривается если вы имеете таковой). Обязательно требуется установить Pipeline плагин.
3. Требуется настроить Pipeline в Declerative синтаксисе состоящий из 2 шагов.

Пример:

pipeline {
    agent { docker 'test_image' } 
    stages {
        stage('Step 1') {
            steps {
                echo 'Step 1 executed, Khoziainov I.A.'
            }
        }
        stage('Step 2') {
            steps {
                echo 'Step 2 executed, Khoziainov I.A.'
            }
        }
    }
}

4. Настроить Webhooks в GitHub для того чтобы организовать автоматическую сборку в Jenkins.
5. Сделать тестовый commit&push в ваш репозиторий, тем самым запустив сборку.
6. Открыть веб интерфейс Stage View в Jenkins и в Build History выбрать ваш запуск сборки. Сделать скриншот вкладки Console Output.

Как рузультат мы должны увидеть 2 stages с тестовыми сообщениями. Так же лог будет содержать информацию о тригере запуска а именно ваше репо.
Формально этого достаточно для успешного выполнения задания, но в случае если мы заподозрим подозрительный результат, мы бы хотели иметь возможность самим запустить докер файл и сделать коммит в ваш репо для того чтобы запустить новый этап сборки.

7. Дополнительное задание будет заключаться в добавлении во 2 Stage запуска сборки Gradle в вашем репо. В этом случае Console log покажет дополнительную информацию.

Пример очень простой:

pipeline {
	tools {
	     gradle "gradle-xx"
	}
    agent { docker 'test_image' } 
    stages {
        stage('Step 1') {
            steps {
                echo 'Step 1 executed, Khoziainov I.A.'
            }
        }
        stage('Step 2') {
            steps {
                echo 'Step 2 executed, Khoziainov I.A.'
                sh 'gradle ....'
            }
        }
    }
}

